{
  "blitz-field/modelValue": {
    "type": "any",
    "description": "The value of the field. The BlitzForm `formData` is an object with the value of each field and the id for key."
  },
  "BlitzField/modelValue": {
    "type": "any",
    "description": "The value of the field. The BlitzForm `formData` is an object with the value of each field and the id for key."
  },
  "blitz-field/id": {
    "type": "string",
    "description": "An `id` is required for the BlitzForm to be able to know which fields have which value.\n\nA string with dot notation will become a nested field in the `formData`."
  },
  "BlitzField/id": {
    "type": "string",
    "description": "An `id` is required for the BlitzForm to be able to know which fields have which value.\n\nA string with dot notation will become a nested field in the `formData`."
  },
  "blitz-field/defaultValue": {
    "type": "(formData: Record<string, any>, formContext: FormContext) => any | any",
    "description": "A default value to be used when the `modelValue` is `undefined`.\n\nYou can also pass a function that will receive two params you can work with: `(formData, context)`\n- `formData` is the `modelValue` object of your BlitzForm. This will be undefined when BlitzField is used as stand-alone (without BlitzForm) unless you manually pass it.\n- `context` is either your BlitzForm or BlitzField context with many usefull props. See the documentation on Dynamic Props for more info."
  },
  "BlitzField/defaultValue": {
    "type": "(formData: Record<string, any>, formContext: FormContext) => any | any",
    "description": "A default value to be used when the `modelValue` is `undefined`.\n\nYou can also pass a function that will receive two params you can work with: `(formData, context)`\n- `formData` is the `modelValue` object of your BlitzForm. This will be undefined when BlitzField is used as stand-alone (without BlitzForm) unless you manually pass it.\n- `context` is either your BlitzForm or BlitzField context with many usefull props. See the documentation on Dynamic Props for more info."
  },
  "blitz-field/parseValue": {
    "type": "(val: any) => any",
    "description": "A function that modifies a value before it is used in the actual component. (see `parseInput` for the reverse)"
  },
  "BlitzField/parseValue": {
    "type": "(val: any) => any",
    "description": "A function that modifies a value before it is used in the actual component. (see `parseInput` for the reverse)"
  },
  "blitz-field/parseInput": {
    "type": "(val: any) => any",
    "description": "A function that modifies a value after user input but before the value is emitted. (see `parseValue` for the reverse)"
  },
  "BlitzField/parseInput": {
    "type": "(val: any) => any",
    "description": "A function that modifies a value after user input but before the value is emitted. (see `parseValue` for the reverse)"
  },
  "blitz-field/component": {
    "type": "string | Function | DynamicProp<string | Function>",
    "description": "The component to be used for the field. Is mounted via `<component :is=\"component\" />`. You can pass the name of a native HTML5 element or Vue component that is globally registered. You can also import the Vue file and directly pass the imported object, just like you would when you add it to a Vue file's components prop."
  },
  "BlitzField/component": {
    "type": "string | Function | DynamicProp<string | Function>",
    "description": "The component to be used for the field. Is mounted via `<component :is=\"component\" />`. You can pass the name of a native HTML5 element or Vue component that is globally registered. You can also import the Vue file and directly pass the imported object, just like you would when you add it to a Vue file's components prop."
  },
  "blitz-field/slots": {
    "type": "{ label?: string | Record<string, any> | Record<string, any>[], default?: string | Record<string, any> | Record<string, any>[] } | DynamicProp<{ label?: string | Record<string, any> | Record<string, any>[], default?: string | Record<string, any> | Record<string, any>[] }>",
    "description": "An Object with keys for the slot names and an object for values. The object you pass to a slot is itself applied as a `<component is=\"\" />`.\n\nThe last example below shows how this is actually used under the hood."
  },
  "BlitzField/slots": {
    "type": "{ label?: string | Record<string, any> | Record<string, any>[], default?: string | Record<string, any> | Record<string, any>[] } | DynamicProp<{ label?: string | Record<string, any> | Record<string, any>[], default?: string | Record<string, any> | Record<string, any>[] }>",
    "description": "An Object with keys for the slot names and an object for values. The object you pass to a slot is itself applied as a `<component is=\"\" />`.\n\nThe last example below shows how this is actually used under the hood."
  },
  "blitz-field/lang": {
    "type": "{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string } | DynamicProp<{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string }>",
    "description": "The text used in the UI for the action buttons and some error messages.\n\nThe example shows how the error message for required fields is overwritten."
  },
  "BlitzField/lang": {
    "type": "{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string } | DynamicProp<{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string }>",
    "description": "The text used in the UI for the action buttons and some error messages.\n\nThe example shows how the error message for required fields is overwritten."
  },
  "blitz-field/label": {
    "type": "string | DynamicProp<string>",
    "description": "The field label."
  },
  "BlitzField/label": {
    "type": "string | DynamicProp<string>",
    "description": "The field label."
  },
  "blitz-field/subLabel": {
    "type": "string | DynamicProp<string>",
    "description": "A smaller label for extra info."
  },
  "BlitzField/subLabel": {
    "type": "string | DynamicProp<string>",
    "description": "A smaller label for extra info."
  },
  "blitz-field/mode": {
    "type": "'edit' | 'readonly' | 'disabled' | 'raw' | DynamicProp<'edit' | 'readonly' | 'disabled' | 'raw'>",
    "description": "The mode represents how fields are rendered\n- `'edit'` — (default) show editable fields based on the schema\n- `'readonly'` — show each field with `readonly: true`\n- `'disabled'` — show each field with `disabled: true`\n- `'raw'` — used to show raw data of your form (for select components, it will show the data label instead of its value)\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "edit",
      "readonly",
      "disabled",
      "raw",
      "readonly",
      "disabled"
    ]
  },
  "BlitzField/mode": {
    "type": "'edit' | 'readonly' | 'disabled' | 'raw' | DynamicProp<'edit' | 'readonly' | 'disabled' | 'raw'>",
    "description": "The mode represents how fields are rendered\n- `'edit'` — (default) show editable fields based on the schema\n- `'readonly'` — show each field with `readonly: true`\n- `'disabled'` — show each field with `disabled: true`\n- `'raw'` — used to show raw data of your form (for select components, it will show the data label instead of its value)\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "edit",
      "readonly",
      "disabled",
      "raw",
      "readonly",
      "disabled"
    ]
  },
  "blitz-field/events": {
    "type": "Record<string, (event: any, formContext: FormContext) => any> | DynamicProp<Record<string, (event: any, formContext: FormContext) => any>>",
    "description": "An Object with an event name as key and the handler function as value. The function you pass will receive the native event payload as first parameter and the BlitzField context (the component instance) as second: `($event, context) => {}`"
  },
  "BlitzField/events": {
    "type": "Record<string, (event: any, formContext: FormContext) => any> | DynamicProp<Record<string, (event: any, formContext: FormContext) => any>>",
    "description": "An Object with an event name as key and the handler function as value. The function you pass will receive the native event payload as first parameter and the BlitzField context (the component instance) as second: `($event, context) => {}`"
  },
  "blitz-field/required": {
    "type": "boolean | 'required' | DynamicProp<boolean | 'required'>",
    "description": "Whether or not the field is required or not. If a field is marked 'required' it will add a default rule like so: `[val => (val !== null && val !== undefined) || 'Field is required']`. The default message can be set in the `lang` prop as `requiredField`.",
    "options": [
      "required"
    ]
  },
  "BlitzField/required": {
    "type": "boolean | 'required' | DynamicProp<boolean | 'required'>",
    "description": "Whether or not the field is required or not. If a field is marked 'required' it will add a default rule like so: `[val => (val !== null && val !== undefined) || 'Field is required']`. The default message can be set in the `lang` prop as `requiredField`.",
    "options": [
      "required"
    ]
  },
  "blitz-field/dynamicProps": {
    "type": "array",
    "description": "An array with prop names that should be treated as Dynamic Props when passed a function.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzField/dynamicProps": {
    "type": "array",
    "description": "An array with prop names that should be treated as Dynamic Props when passed a function.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/internalLabels": {
    "type": "boolean | undefined | DynamicProp<boolean | undefined>",
    "description": "Set to `true` if the component will take care of showing the `label` and `subLabel`. Both of these props will be passed to the component and not shown in BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzField/internalLabels": {
    "type": "boolean | undefined | DynamicProp<boolean | undefined>",
    "description": "Set to `true` if the component will take care of showing the `label` and `subLabel`. Both of these props will be passed to the component and not shown in BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/internalErrors": {
    "type": "boolean | undefined | DynamicProp<boolean | undefined>",
    "description": "Set to true if the component has its own error handling. This makes sure it passes on props like `error` and does nothing with them in the BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzField/internalErrors": {
    "type": "boolean | undefined | DynamicProp<boolean | undefined>",
    "description": "Set to true if the component has its own error handling. This makes sure it passes on props like `error` and does nothing with them in the BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/showErrorsOn": {
    "type": "string",
    "description": "- 'interaction' — evaluates & shows errors on every interaction or keystroke\n- 'save' — only evaluates & shows errors when clicking 'save'\n- 'save-focus' — only evaluates & shows errors when clicking 'save', then focuses the first field with an error\n- 'never' — never evaluate or show errors\n- 'always' — always evaluate and show errors, even without user interaction\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "interaction",
      "save",
      "save-focus",
      "never",
      "always"
    ]
  },
  "BlitzField/showErrorsOn": {
    "type": "string",
    "description": "- 'interaction' — evaluates & shows errors on every interaction or keystroke\n- 'save' — only evaluates & shows errors when clicking 'save'\n- 'save-focus' — only evaluates & shows errors when clicking 'save', then focuses the first field with an error\n- 'never' — never evaluate or show errors\n- 'always' — always evaluate and show errors, even without user interaction\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "interaction",
      "save",
      "save-focus",
      "never",
      "always"
    ]
  },
  "blitz-field/showCondition": {
    "type": "boolean | DynamicProp<boolean>",
    "description": "Setting to `false` will hide the field. When using as an Dynamic Prop it can used to conditionally hide fields based on the other `formData`."
  },
  "BlitzField/showCondition": {
    "type": "boolean | DynamicProp<boolean>",
    "description": "Setting to `false` will hide the field. When using as an Dynamic Prop it can used to conditionally hide fields based on the other `formData`."
  },
  "blitz-field/readonly": {
    "type": "boolean | 'readonly' | DynamicProp<boolean | 'readonly'>",
    "description": "`readonly` defaults to `true` on `mode: 'readonly'`",
    "options": [
      "readonly"
    ]
  },
  "BlitzField/readonly": {
    "type": "boolean | 'readonly' | DynamicProp<boolean | 'readonly'>",
    "description": "`readonly` defaults to `true` on `mode: 'readonly'`",
    "options": [
      "readonly"
    ]
  },
  "blitz-field/disabled": {
    "type": "boolean | 'disabled' | DynamicProp<boolean | 'disabled'>",
    "description": "`disabled` defaults to `true` on `mode: 'disabled'`",
    "options": [
      "disabled"
    ]
  },
  "BlitzField/disabled": {
    "type": "boolean | 'disabled' | DynamicProp<boolean | 'disabled'>",
    "description": "`disabled` defaults to `true` on `mode: 'disabled'`",
    "options": [
      "disabled"
    ]
  },
  "blitz-field/labelPosition": {
    "type": "'top' | 'left' | DynamicProp<'top' | 'left'>",
    "description": "The position of the label in comparison to the field.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "top",
      "left"
    ]
  },
  "BlitzField/labelPosition": {
    "type": "'top' | 'left' | DynamicProp<'top' | 'left'>",
    "description": "The position of the label in comparison to the field.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "top",
      "left"
    ]
  },
  "blitz-field/fieldStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the BlitzField. Applied like so `:style=\"fieldStyle\"`. Can be an Dynamic Prop (this is why I opted to have a different name from `style`).\n\nIn a BlitzForm schema you can also just write `style: '...'` and BlitzForm will pass that as fieldStyle for you, because \"style\" is not a valid prop name."
  },
  "BlitzField/fieldStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the BlitzField. Applied like so `:style=\"fieldStyle\"`. Can be an Dynamic Prop (this is why I opted to have a different name from `style`).\n\nIn a BlitzForm schema you can also just write `style: '...'` and BlitzForm will pass that as fieldStyle for you, because \"style\" is not a valid prop name."
  },
  "blitz-field/fieldClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the BlitzField. Applied like so `:class=\"fieldClasses\"`. Can be an Dynamic Prop (this is why I opted to have a different name from `class`).\n\nIn a BlitzForm schema you can also just write `class: '...'` and BlitzForm will pass that as `fieldClasses` for you, because \"class\" is not a valid prop name."
  },
  "BlitzField/fieldClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the BlitzField. Applied like so `:class=\"fieldClasses\"`. Can be an Dynamic Prop (this is why I opted to have a different name from `class`).\n\nIn a BlitzForm schema you can also just write `class: '...'` and BlitzForm will pass that as `fieldClasses` for you, because \"class\" is not a valid prop name."
  },
  "blitz-field/componentStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the inner component of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Dynamic Prop."
  },
  "BlitzField/componentStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the inner component of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Dynamic Prop."
  },
  "blitz-field/componentClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the inner component of BlitzField. Applied like so `:class=\"componentClasses\"`. Can be an Dynamic Prop."
  },
  "BlitzField/componentClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the inner component of BlitzField. Applied like so `:class=\"componentClasses\"`. Can be an Dynamic Prop."
  },
  "blitz-field/labelStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the label of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzField/labelStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the label of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/labelClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the label of BlitzField. Applied like so `:class=\"labelClasses\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzField/labelClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the label of BlitzField. Applied like so `:class=\"labelClasses\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-field/formData": {
    "type": "array",
    "description": "This is the *nested* data of all the fields inside a BlitzForm. (When using BlitzListForm as standalone, this is an array.)\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/formData": {
    "type": "array",
    "description": "This is the *nested* data of all the fields inside a BlitzForm. (When using BlitzListForm as standalone, this is an array.)\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/formDataFlat": {
    "type": "Record<string, any>",
    "description": "This is the *flattened* data of all the fields inside a BlitzForm.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/formDataFlat": {
    "type": "Record<string, any>",
    "description": "This is the *flattened* data of all the fields inside a BlitzForm.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/formId": {
    "type": "string",
    "description": "A manually set 'id' of the BlitzForm. This only exists if you passed an id directly to the BlitzForm.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/formId": {
    "type": "string",
    "description": "A manually set 'id' of the BlitzForm. This only exists if you passed an id directly to the BlitzForm.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/formMode": {
    "type": "string",
    "description": "The `mode` of the BlitzForm. A BlitzField inherits the `mode` from the `BlitzForm` via its `mode` prop; however, if you had manually overwritten the mode to be something else, `formMode` can be used to check the current mode of the form. This can be useful inside an Dynamic Prop.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props.",
    "options": [
      "edit",
      "readonly",
      "disabled",
      "raw"
    ]
  },
  "BlitzField/formMode": {
    "type": "string",
    "description": "The `mode` of the BlitzForm. A BlitzField inherits the `mode` from the `BlitzForm` via its `mode` prop; however, if you had manually overwritten the mode to be something else, `formMode` can be used to check the current mode of the form. This can be useful inside an Dynamic Prop.\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props.",
    "options": [
      "edit",
      "readonly",
      "disabled",
      "raw"
    ]
  },
  "blitz-field/updateField": {
    "type": "(val: any, formContext: FormContext) => void",
    "description": "The `updateField` function of BlitzForm. Is passed so it can be used in events. Eg.: `events: { '@update:modelValue': (value, { updateField } => updateField({ id: 'otherField', value }))}`\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/updateField": {
    "type": "(val: any, formContext: FormContext) => void",
    "description": "The `updateField` function of BlitzForm. Is passed so it can be used in events. Eg.: `events: { '@update:modelValue': (value, { updateField } => updateField({ id: 'otherField', value }))}`\n\nIt's not something you can pass via the schema, but something that BlitzForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/rowInput": {
    "type": "(val: any, formContext: FormContext) => void",
    "description": "(only present in BlitzListForm!)\nThe `rowInput` function of BlitzForm. Is passed so it can be used in events. Eg.: `events: { '@update:modelValue': (value, { updateField } => updateField({ id: 'otherField', value }))}`\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/rowInput": {
    "type": "(val: any, formContext: FormContext) => void",
    "description": "(only present in BlitzListForm!)\nThe `rowInput` function of BlitzForm. Is passed so it can be used in events. Eg.: `events: { '@update:modelValue': (value, { updateField } => updateField({ id: 'otherField', value }))}`\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/rowIndex": {
    "type": "number",
    "description": "(only present in BlitzListForm!)\nThe current row index of this field.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/rowIndex": {
    "type": "number",
    "description": "(only present in BlitzListForm!)\nThe current row index of this field.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/rowData": {
    "type": "Record<string, any>",
    "description": "(only present in BlitzListForm!)\nThis is the *nested* data of all the fields of the row.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/rowData": {
    "type": "Record<string, any>",
    "description": "(only present in BlitzListForm!)\nThis is the *nested* data of all the fields of the row.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-field/deleteRow": {
    "type": "() => void",
    "description": "(only present in BlitzListForm!)\nThis is a function that you can call to delete the row.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "BlitzField/deleteRow": {
    "type": "() => void",
    "description": "(only present in BlitzListForm!)\nThis is a function that you can call to delete the row.\n\nIt's not something you can pass via the schema, but something that BlitzListForm will automatically pass to each of its fields so you can use it in Dynamic Props."
  },
  "blitz-form/modelValue": {
    "type": "Record<string, any>",
    "description": "An object with the data of the entire form. The object keys are the ids of the fields passed in the `schema`.\n\nTo be used with `:modelValue` or `v-model`."
  },
  "BlitzForm/modelValue": {
    "type": "Record<string, any>",
    "description": "An object with the data of the entire form. The object keys are the ids of the fields passed in the `schema`.\n\nTo be used with `:modelValue` or `v-model`."
  },
  "blitz-form/id": {
    "type": "string",
    "description": "A manually set `id` of the BlitzForm. This prop is accessible in the `context` (as `formId`) of any Dynamic Prop and event.\n\nRead more on Dynamic Props in its dedicated page."
  },
  "BlitzForm/id": {
    "type": "string",
    "description": "A manually set `id` of the BlitzForm. This prop is accessible in the `context` (as `formId`) of any Dynamic Prop and event.\n\nRead more on Dynamic Props in its dedicated page."
  },
  "blitz-form/schema": {
    "type": "array",
    "description": "This is the heart of your BlitzForm. It's the schema that defines what fields will be generated.\n\nThe possible props you can pass are:\n- BlitzField props (see BlitzField API Card in the documentation)\n- any props of the actual component you define"
  },
  "BlitzForm/schema": {
    "type": "array",
    "description": "This is the heart of your BlitzForm. It's the schema that defines what fields will be generated.\n\nThe possible props you can pass are:\n- BlitzField props (see BlitzField API Card in the documentation)\n- any props of the actual component you define"
  },
  "blitz-form/actionButtons": {
    "type": "array",
    "description": "Buttons on top of the form that control the `mode` of the form. The possible pre-made buttons are:\n- `'edit'` — a button which puts the form in 'edit' mode & does `emit('edit')`\n- `'cancel'` — a button which puts the form in 'readonly' mode & does `emit('cancel')`\n- `'save'` — a button which puts the form in 'edit' mode & does `emit('save', {newData, oldData})`\n- `'delete'` — a red button which does `emit('delete')`\n- `'archive'` — a red button which does `emit('archive')`\n\nYou can also pass custom buttons with the same schema to generate forms.\n\nSee the documentation on Action Buttons for more info.",
    "options": [
      "cancel",
      "save",
      "delete",
      "archive"
    ]
  },
  "BlitzForm/actionButtons": {
    "type": "array",
    "description": "Buttons on top of the form that control the `mode` of the form. The possible pre-made buttons are:\n- `'edit'` — a button which puts the form in 'edit' mode & does `emit('edit')`\n- `'cancel'` — a button which puts the form in 'readonly' mode & does `emit('cancel')`\n- `'save'` — a button which puts the form in 'edit' mode & does `emit('save', {newData, oldData})`\n- `'delete'` — a red button which does `emit('delete')`\n- `'archive'` — a red button which does `emit('archive')`\n\nYou can also pass custom buttons with the same schema to generate forms.\n\nSee the documentation on Action Buttons for more info.",
    "options": [
      "cancel",
      "save",
      "delete",
      "archive"
    ]
  },
  "blitz-form/actionButtonDefaults": {
    "type": "{ edit?: Record<string, any>, cancel?: Record<string, any>, save?: Record<string, any>, delete?: Record<string, any>, archive?: Record<string, any>, }",
    "description": "You can overwrite the schema used for the default action buttons for edit, cancel, save, delete & archive."
  },
  "BlitzForm/actionButtonDefaults": {
    "type": "{ edit?: Record<string, any>, cancel?: Record<string, any>, save?: Record<string, any>, delete?: Record<string, any>, archive?: Record<string, any>, }",
    "description": "You can overwrite the schema used for the default action buttons for edit, cancel, save, delete & archive."
  },
  "blitz-form/actionButtonsPosition": {
    "type": "string",
    "description": "The position of the action buttons.",
    "options": [
      "top",
      "bottom",
      "right",
      "left"
    ]
  },
  "BlitzForm/actionButtonsPosition": {
    "type": "string",
    "description": "The position of the action buttons.",
    "options": [
      "top",
      "bottom",
      "right",
      "left"
    ]
  },
  "blitz-form/columnCount": {
    "type": "number",
    "description": "The amount of columns the form should have. Each field can set a specific 'span' to be able to span multiple columns."
  },
  "BlitzForm/columnCount": {
    "type": "number",
    "description": "The amount of columns the form should have. Each field can set a specific 'span' to be able to span multiple columns."
  },
  "blitz-form/gridGap": {
    "type": "string",
    "description": "The size of the gap between each field in the form."
  },
  "BlitzForm/gridGap": {
    "type": "string",
    "description": "The size of the gap between each field in the form."
  },
  "blitz-form/lang": {
    "type": "{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string } | DynamicProp<{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string }>",
    "description": "The text used in the UI for the action buttons and some error messages."
  },
  "BlitzForm/lang": {
    "type": "{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string } | DynamicProp<{ archive?: string, delete?: string, cancel?: string, edit?: string, save?: string, requiredField?: string, formValidationError?: string }>",
    "description": "The text used in the UI for the action buttons and some error messages."
  },
  "blitz-form/mode": {
    "type": "string",
    "description": "The mode represents how fields are rendered\n- `'edit'` — (default) show editable fields based on the schema\n- `'readonly'` — show each field with `readonly: true`\n- `'disabled'` — show each field with `disabled: true`\n- `'raw'` — used to show raw data of your form (for select components, it will show the data label instead of its value)\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "edit",
      "readonly",
      "disabled",
      "raw"
    ]
  },
  "BlitzForm/mode": {
    "type": "string",
    "description": "The mode represents how fields are rendered\n- `'edit'` — (default) show editable fields based on the schema\n- `'readonly'` — show each field with `readonly: true`\n- `'disabled'` — show each field with `disabled: true`\n- `'raw'` — used to show raw data of your form (for select components, it will show the data label instead of its value)\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "edit",
      "readonly",
      "disabled",
      "raw"
    ]
  },
  "blitz-form/labelPosition": {
    "type": "string|function",
    "description": "The position of the label in comparison to the field.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "top",
      "left"
    ]
  },
  "BlitzForm/labelPosition": {
    "type": "string|function",
    "description": "The position of the label in comparison to the field.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "top",
      "left"
    ]
  },
  "blitz-form/labelStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the label of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzForm/labelStyle": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom styling to be applied to the label of BlitzField. Applied like so `:style=\"componentStyle\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/labelClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the label of BlitzField. Applied like so `:class=\"labelClasses\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzForm/labelClasses": {
    "type": "string | Record<string, boolean> | (string | Record<string, boolean>)[] | DynamicProp<string | Record<string, boolean> | (string | Record<string, boolean>)[]>",
    "description": "Custom classes to be applied to the label of BlitzField. Applied like so `:class=\"labelClasses\"`. Can be an Dynamic Prop.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/dynamicProps": {
    "type": "array",
    "description": "An array with prop names that should be treated as Dynamic Props when passed a function.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzForm/dynamicProps": {
    "type": "array",
    "description": "An array with prop names that should be treated as Dynamic Props when passed a function.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/internalLabels": {
    "type": "boolean | undefined",
    "description": "Set to `true` if the component will take care of showing the `label` and `subLabel`. Both of these props will be passed to the component and not shown in BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzForm/internalLabels": {
    "type": "boolean | undefined",
    "description": "Set to `true` if the component will take care of showing the `label` and `subLabel`. Both of these props will be passed to the component and not shown in BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/internalErrors": {
    "type": "boolean | undefined",
    "description": "Set to true if the component has its own error handling. This makes sure it passes on props like `error` and does nothing with them in the BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "BlitzForm/internalErrors": {
    "type": "boolean | undefined",
    "description": "Set to true if the component has its own error handling. This makes sure it passes on props like `error` and does nothing with them in the BlitzField.\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields)."
  },
  "blitz-form/showErrorsOn": {
    "type": "string",
    "description": "- 'interaction' — evaluates & shows errors on every interaction or keystroke\n- 'save' — only evaluates & shows errors when clicking 'save'\n- 'save-focus' — only evaluates & shows errors when clicking 'save', then focuses the first field with an error\n- 'never' — never evaluate or show errors\n- 'always' — always evaluate and show errors, even without user interaction\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "interaction",
      "save",
      "save-focus",
      "never",
      "always"
    ]
  },
  "BlitzForm/showErrorsOn": {
    "type": "string",
    "description": "- 'interaction' — evaluates & shows errors on every interaction or keystroke\n- 'save' — only evaluates & shows errors when clicking 'save'\n- 'save-focus' — only evaluates & shows errors when clicking 'save', then focuses the first field with an error\n- 'never' — never evaluate or show errors\n- 'always' — always evaluate and show errors, even without user interaction\n\nThis prop can be set on a BlitzField or on a BlitzForm (in which case it's applied to all fields).",
    "options": [
      "interaction",
      "save",
      "save-focus",
      "never",
      "always"
    ]
  },
  "blitz-form/formComponent": {
    "type": "string | Function",
    "description": "The component that should be used to generate the form. Defaults to a div. You can pass the name of a native HTML5 element or Vue component that is globally registered. You can also import the Vue file and directly pass the imported object, just like you would when you add it to a Vue file's components prop."
  },
  "BlitzForm/formComponent": {
    "type": "string | Function",
    "description": "The component that should be used to generate the form. Defaults to a div. You can pass the name of a native HTML5 element or Vue component that is globally registered. You can also import the Vue file and directly pass the imported object, just like you would when you add it to a Vue file's components prop."
  },
  "blitz-h/options": {
    "type": "array"
  },
  "BlitzH/options": {
    "type": "array"
  },
  "blitz-list-form/modelValue": {
    "type": "array"
  },
  "BlitzListForm/modelValue": {
    "type": "array"
  },
  "blitz-list-form/schema": {
    "type": "array",
    "description": "This is the information on the columns you want to be shown. An array of objects just like a BlitzForm."
  },
  "BlitzListForm/schema": {
    "type": "array",
    "description": "This is the information on the columns you want to be shown. An array of objects just like a BlitzForm."
  },
  "blitz-list-form/attrsToPass": {
    "type": "array",
    "description": "A list of prop (attribute) names to be passed on to each single BlitzField generated in the list form.\n\nThis is useful when you want to use Dynamic Props in the schema of the mine form but need information from the top level BlitzForm."
  },
  "BlitzListForm/attrsToPass": {
    "type": "array",
    "description": "A list of prop (attribute) names to be passed on to each single BlitzField generated in the list form.\n\nThis is useful when you want to use Dynamic Props in the schema of the mine form but need information from the top level BlitzForm."
  },
  "blitz-list-form/maxRows": {
    "type": "number",
    "description": "Allows to limit the max amount of rows."
  },
  "BlitzListForm/maxRows": {
    "type": "number",
    "description": "Allows to limit the max amount of rows."
  },
  "blitz-list-form/disabled": {
    "type": "boolean"
  },
  "BlitzListForm/disabled": {
    "type": "boolean"
  },
  "blitz-list-form/readonly": {
    "type": "boolean"
  },
  "BlitzListForm/readonly": {
    "type": "boolean"
  }
}