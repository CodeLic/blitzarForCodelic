import{_ as e}from"./preload-helper.1c052cf7.js";import{_ as i,G as l,o as p,b as r,A as n,al as o,g as t,f as s}from"./plugin-vue_export-helper.940ab1d0.js";const ee='{"title":"BlitzForm","description":"","frontmatter":{"editLink":true},"headers":[{"level":2,"title":"Installation & Usage","slug":"installation-usage"},{"level":3,"title":"Vue 2","slug":"vue-2"},{"level":3,"title":"Vue 3","slug":"vue-3"},{"level":2,"title":"Basics","slug":"basics"},{"level":3,"title":"Schema","slug":"schema"},{"level":3,"title":"Basic Example","slug":"basic-example"},{"level":3,"title":"Form Data / v-model","slug":"form-data-v-model"},{"level":3,"title":"Advanced Example","slug":"advanced-example"},{"level":3,"title":"Use Custom Components","slug":"use-custom-components"},{"level":3,"title":"Use HTML5 Elements","slug":"use-html5-elements"},{"level":2,"title":"Frameworks","slug":"frameworks"},{"level":2,"title":"Modes","slug":"modes"},{"level":3,"title":"Edit/Readonly/Disabled/Raw Modes","slug":"edit-readonly-disabled-raw-modes"},{"level":3,"title":"Disable Fields on Readonly Mode","slug":"disable-fields-on-readonly-mode"},{"level":2,"title":"Action Buttons","slug":"action-buttons"},{"level":3,"title":"Pre-Made Action Buttons","slug":"pre-made-action-buttons"},{"level":3,"title":"Overwriting Pre-Made Buttons","slug":"overwriting-pre-made-buttons"},{"level":3,"title":"Custom Action Buttons & Fields","slug":"custom-action-buttons-fields"},{"level":2,"title":"Form Data","slug":"form-data"},{"level":3,"title":"parseValue & parseInput","slug":"parsevalue-parseinput"},{"level":3,"title":"Clearing the Form","slug":"clearing-the-form"},{"level":3,"title":"Resetting the Form","slug":"resetting-the-form"},{"level":3,"title":"Nested Data","slug":"nested-data"},{"level":3,"title":"List Forms","slug":"list-forms"},{"level":2,"title":"Styling","slug":"styling"},{"level":3,"title":"Left Labels","slug":"left-labels"},{"level":3,"title":"Custom Label Positioning","slug":"custom-label-positioning"},{"level":3,"title":"Custom Label Content","slug":"custom-label-content"},{"level":3,"title":"Raw Form Styling","slug":"raw-form-styling"},{"level":3,"title":"Styling Action Buttons","slug":"styling-action-buttons"},{"level":2,"title":"Events","slug":"events"},{"level":3,"title":"Form Events","slug":"form-events"},{"level":3,"title":"Field Events","slug":"field-events"},{"level":3,"title":"Update Other Fields on Events","slug":"update-other-fields-on-events"},{"level":2,"title":"Validation","slug":"validation"},{"level":3,"title":"Showing Errors","slug":"showing-errors"},{"level":3,"title":"Validation on Every Keystroke","slug":"validation-on-every-keystroke"},{"level":3,"title":"Validation on Save","slug":"validation-on-save"},{"level":3,"title":"Validate formData Programatically","slug":"validate-formdata-programatically"},{"level":2,"title":"Advanced","slug":"advanced"},{"level":3,"title":"Dynamic Props & Computed Field Values","slug":"dynamic-props-computed-field-values"}],"relativePath":"blitz-form/index.md","lastUpdated":1666679184453}',c={},d=o(`<h1 id="blitzform" tabindex="-1">BlitzForm <a class="header-anchor" href="#blitzform" aria-hidden="true">#</a></h1><h2 id="installation-usage" tabindex="-1">Installation &amp; Usage <a class="header-anchor" href="#installation-usage" aria-hidden="true">#</a></h2><h3 id="vue-2" tabindex="-1">Vue 2 <a class="header-anchor" href="#vue-2" aria-hidden="true">#</a></h3><ul><li>install with <code>npm i blitzar@0</code></li><li>see documentation at <a href="https://blitzar0.web.app" target="_blank" rel="noopener noreferrer">blitzar0.web.app</a></li></ul><h3 id="vue-3" tabindex="-1">Vue 3 <a class="header-anchor" href="#vue-3" aria-hidden="true">#</a></h3><div class="language-"><pre><code>npm i blitzar
</code></pre></div><p>You must import Blitzar components locally wherever you want to use them, as per the example below:</p><div class="language-js"><pre><code><span class="token comment">// import what you need</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BlitzTable<span class="token punctuation">,</span> BlitzListForm<span class="token punctuation">,</span> BlitzTable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;blitzar&#39;</span>
<span class="token comment">// include Blitzar&#39;s CSS (kept at minimal and doesn&#39;t pollute global scope)</span>
<span class="token keyword">import</span> <span class="token string">&#39;blitzar/dist/style.css&#39;</span>

<span class="token comment">// add to local components where you use it:</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span> BlitzTable<span class="token punctuation">,</span> BlitzListForm<span class="token punctuation">,</span> BlitzTable <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>We do not support Vue&#39;s <code>install(Plugin)</code> out of principle: Anything that is &quot;auto-magical&quot; is not considered good practice; It&#39;s more difficult to trace down where a component is coming from.</p><h2 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-hidden="true">#</a></h2><p><code>&lt;BlitzForm /&gt;</code> is a Vue component that allows you to easily create forms by passing a <em><strong>schema</strong></em>. Based on this schema the form is generated for you. No more writing clunky HTML forms! \u{1F389}</p><div class="tip custom-block"><p class="custom-block-title">Did you know?</p><p>BlitzForm is a BYOC form generator! (Bring Your Own Components)</p></div><h3 id="schema" tabindex="-1">Schema <a class="header-anchor" href="#schema" aria-hidden="true">#</a></h3><p>The schema of a BlitzForm is an array of objects that usually looks something like this:</p><div class="language-js"><pre><code><span class="token comment">// you can use regular HTML5 tags or custom Vue components!</span>
<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;firstName&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;First Name&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;lastName&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;Last Name&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>The &quot;component&quot; of a field in your schema can be any Vue component you have globally registered or any HTML5 tag.</p><p>Besides <code>id</code>, <code>label</code> and <code>component</code> there are many more props you can pass: <code>subLabel</code> <code>required</code> <code>labelPosition</code> <code>fieldClasses</code> <code>componentClasses</code> <code>parseValue</code> <code>parseInput</code> <code>events</code> and many more.</p><h3 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-hidden="true">#</a></h3><p>Check out the template/script/style below to see how simple the code looks to render this form.</p><p>The form below uses regular HTML <code>input</code> and <code>select</code> fields. You can change the look of the fields with CSS or, even better, you can simply <a href="#use-custom-components">use your own Vue components</a> for the fields.</p>`,20),u=o('<h3 id="form-data-v-model" tabindex="-1">Form Data / v-model <a class="header-anchor" href="#form-data-v-model" aria-hidden="true">#</a></h3><p>There are three ways to retrieve the data that a user fills in a BlitzForm.</p><ol><li>You can pass an empty object as <code>v-model</code><br>In this case BlitzForms will populate an object with the field&#39;s <code>id</code> as key and the user input as value.</li><li>You can listen to the <code>@updateField</code> event which triggers every time a field&#39;s value changes. It&#39;s payload is an object that looks like: <code>{id, value}</code>.</li><li>You can listen to the <code>@save</code> event which is triggered when the form&#39;s save button is pressed. It&#39;s payload is an object that looks like: <code>{newData, oldData}</code>. For more info see the <a href="#action-buttons">Action Buttons documentation</a>.</li></ol><h3 id="advanced-example" tabindex="-1">Advanced Example <a class="header-anchor" href="#advanced-example" aria-hidden="true">#</a></h3><p>Here you can see an advanced form rendered with all <strong>HTML5 form elements</strong>.</p><p>If you look at the &quot;script&quot; you will see it&#39;s easy to use regular HTML5 elements. In reality however, you will probably use Blitzar with your custom Vue components. Which in explained in the <a href="#use-custom-components">next chapter</a>.</p>',6),m=o(`<h3 id="use-custom-components" tabindex="-1">Use Custom Components <a class="header-anchor" href="#use-custom-components" aria-hidden="true">#</a></h3><p>The main use case of BlitzForm will be where you use your own Vue components. In this example below we see how you can simply refer to a custom component name:</p><div class="language-js"><pre><code><span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token string">&#39;Name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;MyInput&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>In the example below we actually render a form using our custom component <code>BlitzInput</code>. If you are interested in the source code of BlitzInput, <a href="https://github.com/CyCraft/blitzar/tree/production/packages/components/src/BlitzInput/BlitzInput.vue" target="_blank" rel="noopener noreferrer">you can find it here</a>.</p>`,4),h=t("p",null,"Here is another example of a simple login form:",-1),_=o(`<div class="tip custom-block"><p class="custom-block-title">Please note!</p><p>Components you want to use in BlitzForm must be registered Globally! (See the <a href="https://v3.vuejs.org/guide/component-registration.html" target="_blank" rel="noopener noreferrer">official Vue documentation</a> for more info)</p><p>If you need to use locally registered components, see <a href="/advanced/#using-locally-registered-components">Advanced &gt; Using Locally Registered Components</a></p></div><h3 id="use-html5-elements" tabindex="-1">Use HTML5 Elements <a class="header-anchor" href="#use-html5-elements" aria-hidden="true">#</a></h3><p>In the <a href="#advanced-example">Advanced Example</a> we have shown how to use HTML5 form elements, like <code>input</code>, <code>select</code> etc.</p><p>It&#39;s possible to use other HTML5 elements as well like <code>a</code>, <code>p</code>, <code>div</code>, <code>ol</code>, <code>ul</code>, etc. For these elements you need to use the prop called <code>slot</code> to pass content:</p><div class="language-js"><pre><code><span class="token punctuation">{</span>
  <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">slot</span><span class="token operator">:</span> <span class="token string">&#39;It can be anything!&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><p>In this example we use a <code>p</code> paragraph to add more context in our form:</p><div class="language-js"><pre><code><span class="token comment">// Eg.</span>
<span class="token keyword">const</span> schema <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">label</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">What&#39;s your nickname?</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
    <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;p&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">slot</span><span class="token operator">:</span> <span class="token string">&#39;It can be anything!&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Here are more examples of how you can use HTML5 elements you can use in Blitz Forms:</p>`,8),k=o('<div class="tip custom-block"><p class="custom-block-title">When to use HTML5 elements in the form schema.</p><p>This can be useful if you have form schemas saved in a Database and the user wants to display some simple HTML or an image in their form.</p></div><div class="tip custom-block"><p class="custom-block-title">When to **NOT** use HTML5 elements in the form schema.</p><p>When you know what the form schema will be, adding extra flair to that form can easily be done <em>outside</em> of the <code>&lt;BlitzForm /&gt;</code> tag. You will have a lot more freedom.</p></div><h2 id="frameworks" tabindex="-1">Frameworks <a class="header-anchor" href="#frameworks" aria-hidden="true">#</a></h2><p>Blitzar is framework-agnostic. Blitzar is merely a wrapper around your own form components.</p><p>In the Vue ecosystem there are many component frameworks, and they&#39;re all compatible with Blitzar!</p><p>Click on your favorite framework to see an example:</p><ul><li>Quasar Framework <em>(example coming soon)</em></li><li>Vuetify <em>(example coming soon)</em></li><li>Nuxt <em>(example coming soon)</em></li><li>Tailwind <em>(example coming soon)</em></li><li>Bulma <em>(example coming soon)</em></li></ul><p><strong>All the frameworks above are compatible!</strong> But the examples for these conflict with my documentation website. So creating live examples is a little bit of work! Coming soon!</p><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-hidden="true">#</a></h2><h3 id="edit-readonly-disabled-raw-modes" tabindex="-1">Edit/Readonly/Disabled/Raw Modes <a class="header-anchor" href="#edit-readonly-disabled-raw-modes" aria-hidden="true">#</a></h3><p>BlitzForm has five modes:</p><ul><li><code>&#39;edit&#39;</code> \u2014 (default) show editable fields based on the schema</li><li><code>&#39;readonly&#39;</code> \u2014 show each field with <code>readonly: true</code></li><li><code>&#39;disabled&#39;</code> \u2014 show each field with <code>disabled: true</code></li><li><code>&#39;raw&#39;</code> \u2014 used to show raw data of your form (for select components, it will show the data label instead of its value)</li></ul><p>The same schema to render a form can be re-used to just display form data as well. Your form schema is therefore very versatile!</p><p>Please note however, that in order for <code>&#39;readonly&#39;</code> mode to work, you will need to make sure that all components you use in your form, have proper handling when BlitzForm passes <code>readonly: true</code> to them.</p><p>With the HTML5 elements seen in the example below, the only field that understands <code>readonly: true</code> is the <code>input</code> component. Try switching the mode to <code>&#39;readonly&#39;</code> and you will see that all other fields are still editable; so you&#39;ll need to use Vue components that handle <code>readonly: true</code>, or write wrapper Vue components for these HTML5 elements.</p><p><code>&#39;disabled&#39;</code> and <code>&#39;raw&#39;</code> mode on the other hand work out of the box with all these components.</p>',16),f=o('<h3 id="disable-fields-on-readonly-mode" tabindex="-1">Disable Fields on Readonly Mode <a class="header-anchor" href="#disable-fields-on-readonly-mode" aria-hidden="true">#</a></h3><p>It&#39;s also possible you just use the <code>disabled</code> prop for fields that don&#39;t handle <code>readonly</code>.</p><p>In this example below you can see how easy this is by using a Dynamic Prop for <code>disabled</code>. (Read more on Dynamic Props at <a href="/advanced/#dynamic-props">Advanced &gt; Dynamic Props</a>)</p><p>However, in reality it&#39;s cleaner you just add the <code>readonly</code> prop to your Vue components, or if you use a component library, create a wrapper components for them.</p>',4),v=o('<h2 id="action-buttons" tabindex="-1">Action Buttons <a class="header-anchor" href="#action-buttons" aria-hidden="true">#</a></h2><p>Action buttons are buttons you would want to add to a form to do things like edit/save/delete etc... You can easily add action buttons like these on the top/bottom or sides of your BlitzForm.</p><p>Action buttons are set via the prop <code>actionButtons</code>. You can use pre-made action buttons that emit events. You can also overwrite the look of these pre-made buttons. Finally you can also set custom buttons and fields.</p><h3 id="pre-made-action-buttons" tabindex="-1">Pre-Made Action Buttons <a class="header-anchor" href="#pre-made-action-buttons" aria-hidden="true">#</a></h3><p>Pre-made buttons can be added to your form by just passing the string of the button you want:</p><p><code>:action-buttons=&quot;[&#39;edit&#39;, &#39;cancel&#39;, &#39;save&#39;, &#39;delete&#39;, &#39;archive&#39;]&quot;</code></p><p>When added you will see the buttons like the preview below. They each have a functionality:</p><ul><li><code>&#39;edit&#39;</code> \u2014 adds a button that puts the form in &quot;edit&quot; mode</li><li><code>&#39;cancel&#39;</code> \u2014 adds a button that puts the form back into &quot;readonly&quot; mode &amp; reverts any changes to the form data</li><li><code>&#39;save&#39;</code> \u2014 adds a button that puts the form back into &quot;readonly&quot; mode &amp; keeps the modified content</li><li><code>&#39;delete&#39;</code> <code>&#39;archive&#39;</code> \u2014 adds a button that emits a delete or archive event (you must implement your own logic)</li></ul><p>The buttons that are added emit the events: <code>@edit</code> <code>@cancel</code> <code>@save</code> <code>@delete</code> <code>@archive</code></p><p>You can listen for these events on the <code>&lt;BlitzForm /&gt;</code> to use do things like:</p><ul><li>saving data to a DB when save is clicked</li><li>moving a popup when cancel is clicked</li><li>clear the form data (<code>value</code>) when delete is clicked</li></ul><p>The <code>@save</code> event receives a payload with the new and old form data.</p><ul><li><code>@save=&quot;onSave&quot;</code></li></ul><p>Play with the pre-made action buttons below and see what happens:</p>',14),g=o('<h3 id="overwriting-pre-made-buttons" tabindex="-1">Overwriting Pre-Made Buttons <a class="header-anchor" href="#overwriting-pre-made-buttons" aria-hidden="true">#</a></h3><p>You can overwrite how the pre-made buttons look with the <code>actionButtonDefaults</code> prop.</p><p>In the example below you can see we are overwriting some properties of the HTML5 buttons. See the <em><strong>script tab</strong></em>.</p><p>However, most likely you will pass <code>component: &#39;MyButton&#39;</code> and pass your own Vue button components.</p>',4),y=o(`<h3 id="custom-action-buttons-fields" tabindex="-1">Custom Action Buttons &amp; Fields <a class="header-anchor" href="#custom-action-buttons-fields" aria-hidden="true">#</a></h3><p>You can also pass custom buttons &amp; fields with a schema. The schema you provide works just like the BlitzForm schema.</p><p>Here is an example of adding a custom button to the <code>actionButtons</code></p><div class="language-js"><pre><code><span class="token literal-property property">actionButtons</span><span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;button&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">slot</span><span class="token operator">:</span> <span class="token string">&#39;log the data&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">showCondition</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> <span class="token punctuation">{</span> formData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> formData<span class="token punctuation">.</span>enableLogging<span class="token punctuation">,</span>
    <span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token function-variable function">click</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token punctuation">,</span> <span class="token punctuation">{</span> formData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Being able to show/hide these button based on the <code>formData</code> can be very powerful.</p>`,5),w=o('<blockquote><p>Be sure to check out the <a href="#events">Events</a> documentation for explanation on those <code>events</code> in the schema.</p></blockquote><h2 id="form-data" tabindex="-1">Form Data <a class="header-anchor" href="#form-data" aria-hidden="true">#</a></h2><h3 id="parsevalue-parseinput" tabindex="-1">parseValue &amp; parseInput <a class="header-anchor" href="#parsevalue-parseinput" aria-hidden="true">#</a></h3><p>TODO: write a short section on <code>parseValue</code> &amp; <code>parseInput</code></p><h3 id="clearing-the-form" tabindex="-1">Clearing the Form <a class="header-anchor" href="#clearing-the-form" aria-hidden="true">#</a></h3><p>In order to <em><strong>clear</strong></em> the form data <em>or</em> to <em><strong>load new data</strong></em> into the form, you will need to re-mount the form vue component!</p><p>BlitzForm copies the formData into its local state on mount, but it does not watch for all changes to <code>formData</code> (meaning the <code>v-model</code> or <code>value</code> prop). This is to achieve better performance.</p><p>Therefore you need to manually re-mount as seen in the example below. Watch what happens when clearing &amp; loading data with and without remounting.</p>',8),b=t("h3",{id:"resetting-the-form",tabindex:"-1"},[s("Resetting the Form "),t("a",{class:"header-anchor",href:"#resetting-the-form","aria-hidden":"true"},"#")],-1),T=t("p",null,'A BlitzForm automatically makes a backup of form data so you can "cancel an edit".',-1),F=t("p",null,'In the example below there is a form with data. Try clicking "edit", then modify some data, then click "cancel".',-1),E=o('<h3 id="nested-data" tabindex="-1">Nested Data <a class="header-anchor" href="#nested-data" aria-hidden="true">#</a></h3><p>A <code>&lt;BlitzForm /&gt;</code> can use a nested data structure on a flat form schema. When you have a nested data structure you will need to appoint each field ID with dot notation.</p><p>Eg. a field with ID <code>size.width</code> points to <code>{size: {width}}</code> in your data.</p><p>Besides writing your field IDs with dot notation, nothing further needs to be done.</p><p>The only thing you need to be careful with is the <code>@updateField</code> event:</p><ul><li>Listening to the <code>@update:modelValue</code> event will always return the full data nested</li><li>Listening to the <code>@updateField</code> event will always have the field ID with dot-notation in its payload</li></ul><p>Try typing something in the example below:</p>',7),I=o('<h3 id="list-forms" tabindex="-1">List Forms <a class="header-anchor" href="#list-forms" aria-hidden="true">#</a></h3><p>In some cases you might need a form that&#39;s actually a &quot;list&quot; users can fill in. Eg. Have a form where a teacher can write down names of students in a list.</p><p>For this I prepared a special kind of form called a <strong>BlitzListForm</strong> that offers these features:</p><ul><li>Auto populates the next empty field whenever there is user input</li><li>Can be used as standalone component or inside a BlitzForm as a field</li><li>Saves the data as an array</li></ul><p>See it in action in the example down here! Write down some student names to see the <code>formData</code> update.</p>',5),A=o('<blockquote><p>For more info and examples on List Forms, check out the <a href="/blitz-list-form/">dedicated BlitzListForm documentation</a>!</p></blockquote><h2 id="styling" tabindex="-1">Styling <a class="header-anchor" href="#styling" aria-hidden="true">#</a></h2><p>Styling a BlitzForm field through CSS can be done by targeting these classes:</p><ul><li><code>.blitz-field</code></li><li><code>.blitz-field__label</code></li><li><code>.blitz-field__sub-label</code></li><li><code>.blitz-field__component</code></li></ul><h3 id="left-labels" tabindex="-1">Left Labels <a class="header-anchor" href="#left-labels" aria-hidden="true">#</a></h3><p>It&#39;s easy to position all labels on the left side! Just set <code>labelPosition=&quot;left&quot;</code> on the BlitzForm.</p><p>When using left labels, by default, the label only takes up as much width as needed. It&#39;s really easy however to align all labels to be the same width. See the <em><strong>style tab</strong></em> how this is done for the example below.</p>',7),V=t("h3",{id:"custom-label-positioning",tabindex:"-1"},[s("Custom Label Positioning "),t("a",{class:"header-anchor",href:"#custom-label-positioning","aria-hidden":"true"},"#")],-1),R=t("p",null,"It's easy to overwrite the positioning of the field label, sub-label & component with some CSS!",-1),P=t("p",null,[s("Look at the "),t("em",null,[t("strong",null,"style tab")]),s(" to see how to position the "),t("em",null,[t("strong",null,"label on the right")]),s(" and the sub-label on the bottom.")],-1),x=t("h3",{id:"custom-label-content",tabindex:"-1"},[s("Custom Label Content "),t("a",{class:"header-anchor",href:"#custom-label-content","aria-hidden":"true"},"#")],-1),D=t("p",null,[s("You can use the "),t("code",null,"label"),s(" slot to pass extra content to a field's label.")],-1),S=t("p",null,"In the example below we see usage of the label slot to add some extra content next to the title.",-1),L=t("h3",{id:"raw-form-styling",tabindex:"-1"},[s("Raw Form Styling "),t("a",{class:"header-anchor",href:"#raw-form-styling","aria-hidden":"true"},"#")],-1),B=t("p",null,[s("This example uses "),t("code",null,'mode="raw"'),s(" to show just the raw form data. Then CSS is used to style it. See the "),t("em",null,[t("strong",null,"style tab")]),s(".")],-1),C=t("h3",{id:"styling-action-buttons",tabindex:"-1"},[s("Styling Action Buttons "),t("a",{class:"header-anchor",href:"#styling-action-buttons","aria-hidden":"true"},"#")],-1),z=t("p",null,[s("Here is an example of how you can position the action buttons via the "),t("code",null,"actionButtonPosition"),s(" prop.")],-1),O=o('<h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p>There are both form and field events.</p><ul><li><em><strong>Form events</strong></em> \u2014 events to listen to directly on the BlitzForm</li><li><em><strong>Field events</strong></em> \u2014 events you can listen to on a per-field basis; these are to be defined in your <code>schema</code></li></ul><h3 id="form-events" tabindex="-1">Form Events <a class="header-anchor" href="#form-events" aria-hidden="true">#</a></h3><p>A BlitzForm is usable with <code>v-model</code>. You can also listen to the <code>@update:modelValue</code> event that is triggered any time some <code>formData</code> changes.</p><p>There is also an event emitted called <code>@updateField</code>, every time you type something in a specific field.</p><p>Try typing a little in the example below.</p>',7),N=o(`<h3 id="field-events" tabindex="-1">Field Events <a class="header-anchor" href="#field-events" aria-hidden="true">#</a></h3><p>Each component in a form can have a prop called <code>events</code>. This prop will be applied to the field like so: <code>v-on=&quot;events&quot;</code>.</p><p>An <code>events</code> prop would look like so:</p><div class="language-js"><pre><code><span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;update:modelValue&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">$event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">focus</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">$event<span class="token punctuation">,</span> context</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token comment">// etc...</span>
<span class="token punctuation">}</span>
</code></pre></div><p>When you look at the arrow function above, it will receive two arguments: <code>$event</code> and <code>context</code>.</p><ul><li><code>$event</code> is whatever the event that&#39;s emitted receives as payload (eg. <code>MouseClickEvent</code>).</li><li><code>context</code> is the Vue component reference of the BlitzForm component, you can use this to access other properties/values</li><li><code>context</code> has useful props like <code>formData</code>, <code>mode</code>, and others.</li><li><code>context</code> has a special function called <code>updateField</code> which can be used to modify other fields programmatically</li><li>If an event emits two or more arguments, you can access those <em>behind</em> the <code>context</code> argument: <code>(arg1, context, arg2, ...otherArgs) =&gt; {}</code></li></ul><p>Phew. That was a bit of a lot of information all at once. \u{1F605} Let&#39;s look at an example:</p>`,7),M=o(`<h3 id="update-other-fields-on-events" tabindex="-1">Update Other Fields on Events <a class="header-anchor" href="#update-other-fields-on-events" aria-hidden="true">#</a></h3><p>Here we see an example of one field updating the contents of another on the input event.</p><div class="language-js"><pre><code><span class="token literal-property property">events</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&#39;update:modelValue&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> <span class="token punctuation">{</span> updateField <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// get only digits from input</span>
    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token operator">!</span>val <span class="token operator">?</span> <span class="token string">&#39;&#39;</span> <span class="token operator">:</span> val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^\\d]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment">// set field &#39;telClean&#39; to this value</span>
    <span class="token function">updateField</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;telClean&#39;</span><span class="token punctuation">,</span> value <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>The <code>updateField</code> function can be used to update other fields inside your form. It receives a single parameter which should be an object that looks like <code>{id, value}</code> with the <code>id</code> of the field you want to update and a <code>value</code> you want to update it with.</p>`,4),q=o(`<h2 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-hidden="true">#</a></h2><h3 id="showing-errors" tabindex="-1">Showing Errors <a class="header-anchor" href="#showing-errors" aria-hidden="true">#</a></h3><p>BlitzForm comes with lightweight built-in field validation.</p><p>Showing an &quot;error&quot; underneath a field can be done by setting a field&#39;s <code>error</code> to a Dynamic Prop:</p><div class="language-js"><pre><code><span class="token comment">// Eg.</span>
<span class="token punctuation">{</span>
  <span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">dynamicProps</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;error&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token function-variable function">error</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">Number</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token number">18</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token string">&#39;You have to be over 18!&#39;</span>
<span class="token punctuation">}</span>
</code></pre></div><ul><li>The function you provide will receive the field&#39;s <code>modelValue</code> as argument</li><li>If the value is O.K., then you can return <code>null</code></li><li>If the value does not pass your validation, then you must <strong>return the error you want to show</strong> underneath the field</li></ul><p>Be sure to also check out the documentation on <a href="#dynamic-props">Dynamic Props</a> to see what other powerful things you can do with the <code>error</code> field.</p><h3 id="validation-on-every-keystroke" tabindex="-1">Validation on Every Keystroke <a class="header-anchor" href="#validation-on-every-keystroke" aria-hidden="true">#</a></h3><p>By default errors will get validated and shown on every keystroke.</p><p>Type something below to see the effect:</p>`,10),H=o('<h3 id="validation-on-save" tabindex="-1">Validation on Save <a class="header-anchor" href="#validation-on-save" aria-hidden="true">#</a></h3><p>You can set <code>showErrorsOn: &#39;save&#39;</code> on the BlitzForm to make sure that the errors only show when you click save. (The default is <code>showErrorsOn: &#39;interaction&#39;</code>)</p><p>You can also use <code>showErrorsOn: &#39;save-focus&#39;</code> to not only show the error but also automatically focus the field.</p><p>Typing below won&#39;t show errors, but try clicking <strong>save</strong> and see the errors show up, then play around with the different options for <code>showErrorsOn</code>:</p>',4),j=o(`<div class="tip custom-block"><p class="custom-block-title">Please note!</p><p>If you use <code>showErrorsOn: &#39;save-focus&#39;</code> and custom components, you must make sure those components have a method called <code>focus</code>. (because focus is done by calling the <code>focus</code> method on the component ref)</p></div><h3 id="validate-formdata-programatically" tabindex="-1">Validate formData Programatically <a class="header-anchor" href="#validate-formdata-programatically" aria-hidden="true">#</a></h3><p>You can also do programatic validation. BlitzForms provides a helper function which can be used without the need of rendering the form at all. It can be used like so:</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> validateFormPerSchema <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;blitzar&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;blitzar/dist/style.css&#39;</span>

<span class="token function">validateFormPerSchema</span><span class="token punctuation">(</span>formData<span class="token punctuation">,</span> schema<span class="token punctuation">)</span>
</code></pre></div>`,4),Y=o('<h2 id="advanced" tabindex="-1">Advanced <a class="header-anchor" href="#advanced" aria-hidden="true">#</a></h2><h3 id="dynamic-props-computed-field-values" tabindex="-1">Dynamic Props &amp; Computed Field Values <a class="header-anchor" href="#dynamic-props-computed-field-values" aria-hidden="true">#</a></h3><p>See the advanced section for more cool features:</p><ul><li><a href="/advanced/#dynamic-props">Dynamic Props</a></li><li><a href="/advanced/#computed-field-values">Computed Field Values</a></li></ul>',4);function W(U,$,K,G,J,Q){const a=l("CodeBlockComponent");return p(),r("div",null,[d,n(a,{importFn:()=>e(()=>import("./Basics - Basic Example.6bf6118b.js"),["assets/Basics - Basic Example.6bf6118b.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Basics - Basic Example.bd92011d.js"),[])},null,8,["importFn","importFnRaw"]),u,n(a,{importFn:()=>e(()=>import("./Basics - Advanced Example.c4ce2956.js"),["assets/Basics - Advanced Example.c4ce2956.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Basics - Advanced Example.ae369ec0.js"),[])},null,8,["importFn","importFnRaw"]),m,n(a,{importFn:()=>e(()=>import("./Basics - Custom Components - Basic.0b34da2c.js"),["assets/Basics - Custom Components - Basic.0b34da2c.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Basics - Custom Components - Basic.b7504806.js"),[])},null,8,["importFn","importFnRaw"]),h,n(a,{importFn:()=>e(()=>import("./Basics - Custom Components - Auth.32714fd1.js"),["assets/Basics - Custom Components - Auth.32714fd1.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Basics - Custom Components - Auth.6c9e9767.js"),[])},null,8,["importFn","importFnRaw"]),_,n(a,{importFn:()=>e(()=>import("./Basics - HTML5 Elements.60e5c37c.js"),["assets/Basics - HTML5 Elements.60e5c37c.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Basics - HTML5 Elements.da19aa75.js"),[])},null,8,["importFn","importFnRaw"]),k,n(a,{importFn:()=>e(()=>import("./Modes.17ef0863.js"),["assets/Modes.17ef0863.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Modes.c15a286c.js"),[])},null,8,["importFn","importFnRaw"]),f,n(a,{importFn:()=>e(()=>import("./Modes - Disable Fields on Readonly Mode.f499deeb.js"),["assets/Modes - Disable Fields on Readonly Mode.f499deeb.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Modes - Disable Fields on Readonly Mode.b99fb686.js"),[])},null,8,["importFn","importFnRaw"]),v,n(a,{importFn:()=>e(()=>import("./Action Buttons - Pre-Made Action Buttons.5f3edace.js"),["assets/Action Buttons - Pre-Made Action Buttons.5f3edace.js","assets/toasts.0abec3d1.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Action Buttons - Pre-Made Action Buttons.0f130ca0.js"),[])},null,8,["importFn","importFnRaw"]),g,n(a,{importFn:()=>e(()=>import("./Action Buttons - Overwriting Pre-Made Action Buttons.1bc3f72e.js"),["assets/Action Buttons - Overwriting Pre-Made Action Buttons.1bc3f72e.js","assets/toasts.0abec3d1.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Action Buttons - Overwriting Pre-Made Action Buttons.3db05ce9.js"),[])},null,8,["importFn","importFnRaw"]),y,n(a,{importFn:()=>e(()=>import("./Action Buttons - Custom Action Buttons.4038c883.js"),["assets/Action Buttons - Custom Action Buttons.4038c883.js","assets/toasts.0abec3d1.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Action Buttons - Custom Action Buttons.e576ccf4.js"),[])},null,8,["importFn","importFnRaw"]),w,n(a,{importFn:()=>e(()=>import("./Form Data - Clearing the Form.967d3cd1.js"),["assets/Form Data - Clearing the Form.967d3cd1.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Form Data - Clearing the Form.1509d9c3.js"),[])},null,8,["importFn","importFnRaw"]),b,T,F,n(a,{importFn:()=>e(()=>import("./Form Data - Resetting the Form.aa2a4de8.js"),["assets/Form Data - Resetting the Form.aa2a4de8.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Form Data - Resetting the Form.be648af7.js"),[])},null,8,["importFn","importFnRaw"]),E,n(a,{importFn:()=>e(()=>import("./Form Data - Nested Data.dd5c103f.js"),["assets/Form Data - Nested Data.dd5c103f.js","assets/toasts.0abec3d1.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Form Data - Nested Data.b291d0de.js"),[])},null,8,["importFn","importFnRaw"]),I,n(a,{importFn:()=>e(()=>import("./Form Data - List Forms.2f502f60.js"),["assets/Form Data - List Forms.2f502f60.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Form Data - List Forms.d809b059.js"),[])},null,8,["importFn","importFnRaw"]),A,n(a,{importFn:()=>e(()=>import("./Styling - Left Labels.81cbae43.js"),["assets/Styling - Left Labels.81cbae43.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Styling - Left Labels.84b483c2.js"),[])},null,8,["importFn","importFnRaw"]),V,R,P,n(a,{importFn:()=>e(()=>import("./Styling - Custom Label Positioning.87bb8143.js"),["assets/Styling - Custom Label Positioning.87bb8143.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Styling - Custom Label Positioning.c528705a.js"),[])},null,8,["importFn","importFnRaw"]),x,D,S,n(a,{importFn:()=>e(()=>import("./Styling - Custom Label Content.f1b46c18.js"),["assets/Styling - Custom Label Content.f1b46c18.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Styling - Custom Label Content.59e1af33.js"),[])},null,8,["importFn","importFnRaw"]),L,B,n(a,{importFn:()=>e(()=>import("./Styling - Raw Form Styling.2ce363a2.js"),["assets/Styling - Raw Form Styling.2ce363a2.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Styling - Raw Form Styling.2f2f3a6d.js"),[])},null,8,["importFn","importFnRaw"]),C,z,n(a,{importFn:()=>e(()=>import("./Styling - Action Buttons.9e061084.js"),["assets/Styling - Action Buttons.9e061084.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Styling - Action Buttons.fba0d084.js"),[])},null,8,["importFn","importFnRaw"]),O,n(a,{importFn:()=>e(()=>import("./Events - Form Events.06127dfa.js"),["assets/Events - Form Events.06127dfa.js","assets/toasts.0abec3d1.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Events - Form Events.6c7747d5.js"),[])},null,8,["importFn","importFnRaw"]),N,n(a,{importFn:()=>e(()=>import("./Events - Field Events.10be3a95.js"),["assets/Events - Field Events.10be3a95.js","assets/toasts.0abec3d1.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Events - Field Events.c9ed6d49.js"),[])},null,8,["importFn","importFnRaw"]),M,n(a,{importFn:()=>e(()=>import("./Events - Update Other Fields on Events.54f9bf94.js"),["assets/Events - Update Other Fields on Events.54f9bf94.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Events - Update Other Fields on Events.0557f9bf.js"),[])},null,8,["importFn","importFnRaw"]),q,n(a,{importFn:()=>e(()=>import("./Validation - On Every Keystroke.65b28598.js"),["assets/Validation - On Every Keystroke.65b28598.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Validation - On Every Keystroke.e0b28422.js"),[])},null,8,["importFn","importFnRaw"]),H,n(a,{importFn:()=>e(()=>import("./Validation - On Save.d3bf92af.js"),["assets/Validation - On Save.d3bf92af.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js"]),importFnRaw:()=>e(()=>import("./Validation - On Save.27a8b1b5.js"),[])},null,8,["importFn","importFnRaw"]),j,n(a,{importFn:()=>e(()=>import("./Validation - Programatically.09d94c85.js"),["assets/Validation - Programatically.09d94c85.js","assets/index.es.364bad67.js","assets/framework.80e446ab.js","assets/plugin-vue_export-helper.940ab1d0.js","assets/style.186bb6a9.js","assets/toasts.0abec3d1.js"]),importFnRaw:()=>e(()=>import("./Validation - Programatically.7267e71c.js"),[])},null,8,["importFn","importFnRaw"]),Y])}var te=i(c,[["render",W]]);export{ee as __pageData,te as default};
